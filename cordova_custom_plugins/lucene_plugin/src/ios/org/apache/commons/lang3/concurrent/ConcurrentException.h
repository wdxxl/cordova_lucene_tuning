//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/concurrent/ConcurrentException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentException")
#ifdef RESTRICT_OrgApacheCommonsLang3ConcurrentConcurrentException
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentException 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentException 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ConcurrentConcurrentException

#if !defined (OrgApacheCommonsLang3ConcurrentConcurrentException_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentException || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentConcurrentException))
#define OrgApacheCommonsLang3ConcurrentConcurrentException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@interface OrgApacheCommonsLang3ConcurrentConcurrentException : JavaLangException

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)msg
                 withNSException:(NSException *)cause;
#define withJavaLangThrowable withNSException

- (instancetype)initWithNSException:(NSException *)cause;
#define initWithJavaLangThrowable initWithNSException

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentConcurrentException)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentConcurrentException_init(OrgApacheCommonsLang3ConcurrentConcurrentException *self);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentException *new_OrgApacheCommonsLang3ConcurrentConcurrentException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentException *create_OrgApacheCommonsLang3ConcurrentConcurrentException_init();

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentConcurrentException_initWithNSException_(OrgApacheCommonsLang3ConcurrentConcurrentException *self, NSException *cause);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentException *new_OrgApacheCommonsLang3ConcurrentConcurrentException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentException *create_OrgApacheCommonsLang3ConcurrentConcurrentException_initWithNSException_(NSException *cause);

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentConcurrentException_initWithNSString_withNSException_(OrgApacheCommonsLang3ConcurrentConcurrentException *self, NSString *msg, NSException *cause);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentException *new_OrgApacheCommonsLang3ConcurrentConcurrentException_initWithNSString_withNSException_(NSString *msg, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentException *create_OrgApacheCommonsLang3ConcurrentConcurrentException_initWithNSString_withNSException_(NSString *msg, NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentConcurrentException)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentException")
